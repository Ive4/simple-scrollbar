{"version":3,"sources":["../src/simple-scrollbar.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+Ge,eAAe","file":"simple-scrollbar.js","sourcesContent":["const rafFallback = (callback) => setTimeout(callback, 0);\nconst raf = window.requestAnimationFrame || window.setImmediate || rafFallback;\n\nclass DragDealer {\n  constructor(element, context) {\n    this.element = element;\n    this.context = context;\n    this.lastPageY = 0;\n\n    this.element.addEventListener('mousedown', this.handleMouseDown.bind(this));\n  }\n\n  handleMouseDown = (event) => {\n    this.lastPageY = event.pageY;\n    this.element.classList.add('ss-grabbed');\n    document.body.classList.add('ss-grabbed');\n\n    document.addEventListener('mousemove', this.handleDrag);\n    document.addEventListener('mouseup', this.handleStop);\n\n    return false;\n  };\n\n  handleDrag = (event) => {\n    const delta = event.pageY - this.lastPageY;\n    this.lastPageY = event.pageY;\n\n    raf(() => this.context.element.scrollTop += delta / this.context.scrollRatio);\n  };\n\n  handleStop = () =>{\n    this.element.classList.remove('ss-grabbed');\n    document.body.classList.remove('ss-grabbed');\n\n    document.removeEventListener('mousemove', this.handleDrag);\n    document.removeEventListener('mouseup', this.handleStop);\n  };\n}\n\nclass Scrollbar {\n  constructor(element) {\n    this.target = element;\n    this.bar = '<div class=\"ss-scroll\">';\n\n    this.wrapper = document.createElement('div');\n    this.wrapper.setAttribute('class', 'ss-wrapper');\n\n    this.element = document.createElement('div');\n    this.element.setAttribute('class', 'ss-content');\n\n    this.wrapper.appendChild(this.element);\n\n    while (this.target.firstChild) {\n      this.element.appendChild(this.target.firstChild);\n    }\n    this.target.appendChild(this.wrapper);\n\n    this.target.insertAdjacentHTML('beforeend', this.bar);\n    this.bar = this.target.lastChild;\n\n    new DragDealer(this.bar, this);\n    this.handleMoveBar();\n\n    this.element.addEventListener('scroll', this.handleMoveBar);\n    this.element.addEventListener('mouseenter', this.handleMoveBar);\n\n    this.target.classList.add('ss-container');\n  }\n\n  handleMoveBar = (event) => {\n    let totalHeight = this.element.scrollHeight;\n    let ownHeight = this.element.clientHeight;\n    let _this = this;\n\n    this.scrollRatio = ownHeight / totalHeight;\n\n    raf(() => {\n      // Hide scrollbar if no scrolling is possible\n      if (_this.scrollRatio == 1) {\n        _this.bar.classList.add('ss-hidden');\n      } else {\n        _this.bar.classList.remove('ss-hidden');\n        _this.bar.style.cssText = `height:${_this.scrollRatio * 100}%; top:${(_this.element.scrollTop / totalHeight) * 100}%;`;\n      }\n    });\n  };\n}\n\nclass SimpleScrollbar {\n  constructor() {\n    this.initAll();\n  }\n\n  initElement(element) {\n    if (element.hasOwnProperty('data-simple-scrollbar')) {\n      return false;\n    }\n\n    Object.defineProperty(element, 'data-simple-scrollbar', new Scrollbar(element));\n  }\n\n  initAll() {\n    const nodes = document.querySelectorAll('*[ss-container]');\n\n    for (var i = 0; i < nodes.length; i++) {\n      console.debug('init node', i);\n      this.initElement(nodes[i]);\n    }\n  }\n}\n\nexport default SimpleScrollbar;\n"]}